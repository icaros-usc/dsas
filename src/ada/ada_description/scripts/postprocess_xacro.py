#!/usr/bin/env python
from __future__ import print_function
import argparse, lxml.etree, urlparse, sys
import simplejson as json

def add_prefix(node, attribute, prefix):
    old_value = node.attrib[attribute]
    new_value = '{0}/{1}'.format(prefix, old_value)
    node.attrib[attribute] = new_value

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
                        description='Postprocess URDF generated by SW2URDF.')
    parser.add_argument('--name', type=str, default=None,
                        help='name of the generated xacro macro')
    parser.add_argument('--prefix', type=str, default='prefix',
                        help='name of the prefix variable')
    parser.add_argument('--color', type=float, nargs=4, default=None,
                        help='name of the prefix variable')
    parser.add_argument('--package', type=str, default=None,
                        help='package that contains the meshes')
    parser.add_argument('--collision_prims', type=str, default=None,
                        help='json file that contains collision primitives')
    parser.add_argument('--collision_meshes',
                        help= 'directory that contains collision meshes')
    parser.add_argument('input_path', type=str, help='input URDF file')
    parser.add_argument('output_path', type=str, nargs='?',
                        help='output xacro file')
    args = parser.parse_args()

    prefix_var = '${' + args.prefix + '}'
    params = [ args.prefix ]
    xacro_ns = 'http://www.ros.org/wiki/xacro'

    # Load the input URDF.
    with open(args.input_path, 'r') as input_file:
        urdf = lxml.etree.parse(input_file)
        robot_xml = urdf.getroot()

    if args.name is None:
        args.name = robot_xml.attrib['name']

    # Wrap the entire URDF file in a macro tag.
    new_robot_xml = lxml.etree.Element('robot', name=args.name, nsmap={ 'xacro': xacro_ns })
    macro_xml = lxml.etree.SubElement(new_robot_xml, '{{{0}}}macro'.format(xacro_ns),
                                      name=args.name, params=' '.join(params))
    new_urdf = lxml.etree.ElementTree(new_robot_xml)
 
    children_xml = robot_xml.getchildren()
    for child_xml in children_xml:
        macro_xml.append(child_xml)

    # Add a prefix to the link names.
    for link_xml in new_urdf.findall('//link'):
        add_prefix(link_xml, 'name', prefix_var)

    # Add a prefix to mimic joint names
    for mimic_xml in new_urdf.findall('//mimic'):
        add_prefix(mimic_xml, 'joint', prefix_var)

    # Add a prefix to the joint names.
    for joint_xml in new_urdf.findall('//joint'):
        add_prefix(joint_xml, 'name', prefix_var)
        add_prefix(joint_xml.find('parent'), 'link', prefix_var)
        add_prefix(joint_xml.find('child'), 'link', prefix_var)

    # Change the color of all links.
    if args.color is not None:
        for color_xml in new_urdf.findall('//color'):
            color_str = ' '.join(map(str, args.color))
            color_xml.attrib['rgba'] = color_str

    # Update any package-relative mesh paths.
    if args.package is not None:
        for mesh_xml in new_urdf.findall('//mesh'):
            old_url = urlparse.urlparse(mesh_xml.attrib['filename'])
            if old_url.scheme == 'package':
                new_url = (old_url.scheme, args.package, old_url.path,
                           old_url.params, old_url.query, old_url.fragment)
                mesh_xml.attrib['filename'] = urlparse.urlunparse(new_url)

    # Add the collision primitives
    if args.collision_prims is not None and not args.collision_mesh_dir:
        # Remove all existing collision geometry
        for collision in new_urdf.findall('//collision'):
            collision.getparent().remove(collision)
        
        # Add the new primitives from the json file
        collision_prims = json.load(open(args.collision_prims))
        links = new_urdf.findall('//link')
        for link in links:
            name = link.attrib['name']
            basename = name.split('/')[-1]
            if basename in collision_prims:
                for box in collision_prims[basename].get('boxes', []):
                    collision = lxml.etree.SubElement(link, 'collision')
                    origin = lxml.etree.SubElement(collision, 'origin',
                            rpy=' '.join([str(rpy) for rpy in box['rpy']]),
                            xyz=' '.join([str(xyz) for xyz in box['xyz']]))
                    geometry = lxml.etree.SubElement(collision, 'geometry')
                    lxml.etree.SubElement(geometry, 'box',
                            size=' '.join(
                            [str(xyz) for xyz in box['size']]))
                           
                for cylinder in collision_prims[basename].get('cylinders', []):
                    collision = lxml.etree.SubElement(link, 'collision')
                    origin = lxml.etree.SubElement(collision, 'origin',
                            rpy=' '.join([str(rpy) for rpy in cylinder['rpy']]),
                            xyz=' '.join([str(xyz) for xyz in cylinder['xyz']]))
                    geometry = lxml.etree.SubElement(collision, 'geometry')
                    lxml.etree.SubElement(geometry, 'cylinder',
                            radius = str(cylinder['radius']*2),
                            length = str(cylinder['length']*2))
    
    if args.collision_meshes:
        # Remove all existing collision geometry
        for collision in new_urdf.findall('//collision'):
            collision.getparent().remove(collision)
        
        # Add the collision meshes
        visuals = new_urdf.findall('//visual')
        for visual in visuals:
            geometry = visual.findall('geometry')
            if not geometry:
                continue
            
            mesh = geometry[0].findall('mesh')
            if not mesh:
                continue
            
            path = mesh[0].attrib['filename']
            
            collision_file = path.replace('.STL', '_collision.STL')
            link = visual.getparent()
             
            collision = lxml.etree.SubElement(link, 'collision')
            geometry = lxml.etree.SubElement(collision, 'geometry')
            mesh = lxml.etree.SubElement(geometry, 'mesh',
                                             attrib={'filename':collision_file})

    if args.output_path is None:
        lxml.etree.dump(new_robot_xml)
    else:
        with open(args.output_path, 'w') as output_file:
            new_urdf.write(output_file)
